package service.notificationservice;
// Generated by Qodo Gen

import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import service.notificationservice.controller.NotificationController;

import org.junit.Test;
import service.notificationservice.entity.NotificationEntity;
import service.notificationservice.service.NotificationService;
import service.shared.models.ApiResponse;
import service.shared.models.NotificationStatus;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import static org.junit.Assert.*;
public class NotificationControllerTest {


    // Creating a notification returns success response with created notification and CREATED status
    @Test
    public void test_create_notification_returns_success_response() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);
    
        NotificationEntity notification = new NotificationEntity();
        notification.setTitle("Test Title");
        notification.setMessage("Test Message");
        notification.setRecipientId("user123");
        notification.setTimestamp(LocalDateTime.now());
        notification.setStatus(NotificationStatus.UNREAD);
    
        NotificationEntity createdNotification = new NotificationEntity();
        createdNotification.setId(UUID.randomUUID());
        createdNotification.setTitle("Test Title");
        createdNotification.setMessage("Test Message");
        createdNotification.setRecipientId("user123");
        createdNotification.setTimestamp(LocalDateTime.now());
        createdNotification.setStatus(NotificationStatus.UNREAD);
    
        Mockito.when(notificationService.createNotification(notification)).thenReturn(createdNotification);
    
        // Act
        ApiResponse<NotificationEntity> response = controller.createNotification(notification);
    
        // Assert
        assertTrue(response.isSuccess());
        assertEquals(HttpStatus.CREATED, response.getStatus());
        assertEquals("Notification created successfully", response.getMessage());
        assertEquals(createdNotification, response.getData());
    
        Mockito.verify(notificationService).createNotification(notification);
    }

    // Creating a notification throws exception and returns error response with INTERNAL_SERVER_ERROR
    @Test
    public void test_create_notification_returns_error_response_when_exception_occurs() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);
    
        NotificationEntity notification = new NotificationEntity();
        notification.setTitle("Test Title");
        notification.setMessage("Test Message");
        notification.setRecipientId("user123");
        notification.setTimestamp(LocalDateTime.now());
        notification.setStatus(NotificationStatus.UNREAD);
    
        Mockito.when(notificationService.createNotification(notification)).thenThrow(new RuntimeException("Database error"));
    
        // Act
        ApiResponse<NotificationEntity> response = controller.createNotification(notification);
    
        // Assert
        assertFalse(response.isSuccess());
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatus());
        assertEquals("Error creating notification", response.getMessage());
        assertNull(response.getData());
    
        Mockito.verify(notificationService).createNotification(notification);
    }

    // Getting all notifications returns success response with list of notifications and OK status
    @Test
    public void test_get_all_notifications_returns_success_response() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);

        List<NotificationEntity> notifications = List.of(
            new NotificationEntity(),
            new NotificationEntity()
        );

        Mockito.when(notificationService.getAllNotifications()).thenReturn(notifications);

        // Act
        ApiResponse<List<NotificationEntity>> response = controller.getAllNotifications();

        // Assert
        assertTrue(response.isSuccess());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals("Notifications retrieved successfully", response.getMessage());
        assertEquals(notifications, response.getData());

        Mockito.verify(notificationService).getAllNotifications();
    }

    // Getting a notification by ID returns success response with notification and OK status
    @Test
    public void test_get_notification_by_id_returns_success_response() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);

        UUID notificationId = UUID.randomUUID();
        NotificationEntity notification = new NotificationEntity();
        notification.setId(notificationId);
        notification.setTitle("Test Title");
        notification.setMessage("Test Message");
        notification.setRecipientId("user123");
        notification.setTimestamp(LocalDateTime.now());
        notification.setStatus(NotificationStatus.UNREAD);

        Mockito.when(notificationService.getNotificationById(notificationId)).thenReturn(notification);

        // Act
        ApiResponse<NotificationEntity> response = controller.getNotificationById(notificationId);

        // Assert
        assertTrue(response.isSuccess());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals("Notification retrieved successfully", response.getMessage());
        assertEquals(notification, response.getData());

        Mockito.verify(notificationService).getNotificationById(notificationId);
    }

    // Deleting a notification returns success response with NO_CONTENT status
    @Test
    public void test_delete_notification_returns_no_content_status() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);

        UUID notificationId = UUID.randomUUID();

        // Act
        ApiResponse<Void> response = controller.deleteNotification(notificationId);

        // Assert
        assertTrue(response.isSuccess());
        assertEquals(HttpStatus.NO_CONTENT, response.getStatus());
        assertEquals("Notification deleted successfully", response.getMessage());

        Mockito.verify(notificationService).deleteNotification(notificationId);
    }

    // Getting a notification by ID returns not found response when notification doesn't exist
    @Test
    public void test_get_notification_by_id_returns_not_found_when_does_not_exist() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);
        UUID nonExistentId = UUID.randomUUID();

        Mockito.when(notificationService.getNotificationById(nonExistentId)).thenReturn(null);

        // Act
        ApiResponse<NotificationEntity> response = controller.getNotificationById(nonExistentId);

        // Assert
        assertFalse(response.isSuccess());
        assertEquals(HttpStatus.NOT_FOUND, response.getStatus());
        assertEquals("Notification not found", response.getMessage());
        assertNull(response.getData());

        Mockito.verify(notificationService).getNotificationById(nonExistentId);
    }

    // Updating a notification returns success response with updated notification and OK status
    @Test
    public void test_update_notification_returns_success_response() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);

        UUID notificationId = UUID.randomUUID();
        NotificationEntity notification = new NotificationEntity();
        notification.setId(notificationId);
        notification.setTitle("Updated Title");
        notification.setMessage("Updated Message");
        notification.setRecipientId("user123");
        notification.setTimestamp(LocalDateTime.now());
        notification.setStatus(NotificationStatus.READ);

        NotificationEntity updatedNotification = new NotificationEntity();
        updatedNotification.setId(notificationId);
        updatedNotification.setTitle("Updated Title");
        updatedNotification.setMessage("Updated Message");
        updatedNotification.setRecipientId("user123");
        updatedNotification.setTimestamp(LocalDateTime.now());
        updatedNotification.setStatus(NotificationStatus.READ);

        Mockito.when(notificationService.updateNotification(notification)).thenReturn(updatedNotification);

        // Act
        ApiResponse<NotificationEntity> response = controller.updateNotification(notificationId, notification);

        // Assert
        assertTrue(response.isSuccess());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals("Notification updated successfully", response.getMessage());
        assertEquals(updatedNotification, response.getData());

        Mockito.verify(notificationService).updateNotification(notification);
    }

    // Getting all notifications throws exception and returns error response with INTERNAL_SERVER_ERROR
    @Test
    public void test_get_all_notifications_throws_exception() {
        // Arrange
        NotificationService notificationService = Mockito.mock(NotificationService.class);
        NotificationController controller = new NotificationController(notificationService);

        Mockito.when(notificationService.getAllNotifications()).thenThrow(new RuntimeException("Database error"));

        // Act
        ApiResponse<List<NotificationEntity>> response = controller.getAllNotifications();

        // Assert
        assertFalse(response.isSuccess());
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatus());
        assertEquals("Error retrieving notifications", response.getMessage());
        assertNull(response.getData());

        Mockito.verify(notificationService).getAllNotifications();
    }
}